


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Carson Schubert and Swathi Dochibhotla
    3 00000000         ; Last modification date: 10/30/17
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 THUMB
   18 00000000                 AREA             DATA, ALIGN=2
   19 00000000 00 00 00 
              00 00 00 FixedPt SPACE            6
   20 00000006         
   21 00000006                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   22 00000000                 PRESERVE8
   23 00000000                 THUMB
   24 00000000         
   25 00000000         
   26 00000000         
   27 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   28 00000000         ; Output a 32-bit number in unsigned decimal format
   29 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   30 00000000         ; Output: none
   31 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   32 00000000 00000000 
                       cnt     EQU              0
   33 00000000         
   34 00000000         LCD_OutDec
   35 00000000         
   36 00000000 E92D 4C10       PUSH{R4,R10,R11,LR}
   37 00000004 B081            SUB              SP, #4      ;allocate space on 
                                                            the stack for local
                                                             variable cnt
   38 00000006 F04F 0100       MOV              R1, #0
   39 0000000A 9100            STR              R1, [SP, #cnt] ;set default val
                                                            ue of cnt to 0
   40 0000000C 46EB            MOV              R11, SP     ;set R11 to the sta
                                                            ck frame pointer
   41 0000000E F04F 0A0A       MOV              R10, #10    ;use R10 as the div
                                                            isor
   42 00000012         ODloop                               ;ODloop pushes the 
                                                            values onto the sta
                                                            ck in order of MSB 
                                                            -> LSB
   43 00000012 F8DB 4000       LDR              R4, [R11, #cnt] ;load cnt
   44 00000016 FBB0 F3FA       UDIV             R3, R0, R10



ARM Macro Assembler    Page 2 


   45 0000001A FB03 F10A       MUL              R1, R3, R10
   46 0000001E EBA0 0101       SUB              R1, R0, R1  ;R1 = R0 % 10
   47 00000022 B402            PUSH{R1}                     ;push R0 % 10 onto 
                                                            the stack
   48 00000024 F104 0401       ADD              R4, #1
   49 00000028 F8CB 4000       STR              R4, [R11, #cnt] ;increment and 
                                                            store cnt
   50 0000002C 0018            MOVS             R0, R3      ;R0 = R0/10
   51 0000002E 2800            CMP              R0, #0
   52 00000030 D1EF            BNE              ODloop      ;if we have reached
                                                             the end of the num
                                                            ber, move on to pri
                                                            nting
   53 00000032         ODout
   54 00000032 BC01            POP{R0}
   55 00000034 F100 0030       ADD              R0, #'0'    ;add ASCII 0 to the
                                                             value from the sta
                                                            ck
   56 00000038 F7FF FFFE       BL               ST7735_OutChar ;print character
                                                             to screen
   57 0000003C F8DB 4000       LDR              R4, [R11, #cnt]
   58 00000040 3C01            SUBS             R4, #1      ;cnt--
   59 00000042 F8CB 4000       STR              R4, [R11, #cnt]
   60 00000046 2C00            CMP              R4, #0
   61 00000048 D1F3            BNE              ODout       ;if we are out of v
                                                            alues, move on
   62 0000004A         
   63 0000004A B001            ADD              SP, #4      ;deallocate
   64 0000004C E8BD 4C10       POP{R4,R10,R11,LR}           ;restore
   65 00000050         
   66 00000050 4770            BX               LR
   67 00000052         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   68 00000052         
   69 00000052         ; -----------------------LCD _OutFix--------------------
                       --
   70 00000052         ; Output characters to LCD display in fixed-point format
                       
   71 00000052         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   72 00000052         ; Inputs:  R0 is an unsigned 32-bit number
   73 00000052         ; Outputs: none
   74 00000052         ; E.g., R0=0,    then output "0.000 "
   75 00000052         ;       R0=3,    then output "0.003 "
   76 00000052         ;       R0=89,   then output "0.089 "
   77 00000052         ;       R0=123,  then output "0.123 "
   78 00000052         ;       R0=9999, then output "9.999 "
   79 00000052         ;       R0>9999, then output "*.*** "
   80 00000052         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   81 00000052         
   82 00000052         LCD_OutFix
   83 00000052         
   84 00000052 F242 7110       MOV              R1, #10000
   85 00000056 4288            CMP              R0, R1
   86 00000058 D31A            BLO              st          ;if input is less t
                                                            han 10,000, go to s
                                                            tandard output meth
                                                            od 
   87 0000005A F04F 0200       MOV              R2, #0      ;R2 becomes counter



ARM Macro Assembler    Page 3 


                                                            
   88 0000005E         filler
   89 0000005E 4928            LDR              R1, =FixedPt ;R1 holds string p
                                                            ointer
   90 00000060 F04F 032A       MOV              R3, #0x2A   ;0x2A = *
   91 00000064 508B            STR              R3, [R1, R2] ;store at FixedPt 
                                                            + counter
   92 00000066 F102 0201       ADD              R2, #1
   93 0000006A 2A01            CMP              R2, #1
   94 0000006C D104            BNE              skipper     ;if counter is 1, w
                                                            e need a decimal po
                                                            int
   95 0000006E F04F 032E       MOV              R3, #0x2E   ;0x2E = .
   96 00000072 508B            STR              R3, [R1,R2]
   97 00000074 F102 0201       ADD              R2, #1
   98 00000078         skipper
   99 00000078 2A05            CMP              R2, #5
  100 0000007A D1F0            BNE              filler      ;keep filling the s
                                                            tring until it has 
                                                            5 characters
  101 0000007C F04F 0300       MOV              R3, #0
  102 00000080 508B            STR              R3, [R1, R2] ;null terminate th
                                                            e string
  103 00000082 481F            LDR              R0, =FixedPt
  104 00000084 B500            PUSH{LR}
  105 00000086 F7FF FFFE       BL               ST7735_OutString ;output string
                                                             to screen
  106 0000008A F85D EB04       POP{LR}
  107 0000008E E036            B                nope        ;return
  108 00000090         
  109 00000090 E92D 4F10 
                       st      PUSH{R4,R8,R9,R10,R11,LR}
  110 00000094 B081            SUB              SP, #4      ;allocate space for
                                                             cnt
  111 00000096 F04F 0100       MOV              R1, #0
  112 0000009A 9100            STR              R1, [SP, #cnt] ;cnt = 0
  113 0000009C 46EB            MOV              R11, SP     ;set R11 as stack f
                                                            rame
  114 0000009E F44F 7A7A       MOV              R10, #1000  ;R10 is our initial
                                                             divisor 
  115 000000A2 F04F 090A       MOV              R9, #10     ;R9 is our divisor 
                                                            for the divisor
  116 000000A6 F8DF 8058       LDR              R8, =FixedPt ;R8 is string poin
                                                            ter
  117 000000AA         OFloop
  118 000000AA F8DB 4000       LDR              R4, [R11, #cnt]
  119 000000AE FBB0 F3FA       UDIV             R3, R0, R10
  120 000000B2 F103 0330       ADD              R3, #0x30   ;make R3 an ASCII c
                                                            haracter
  121 000000B6 F848 3004       STR              R3, [R8, R4] ;store R0/10 as an
                                                             ASCII character in
                                                             FixedPt[cnt]
  122 000000BA F1A3 0330       SUB              R3, #0x30   ;return R3 to its n
                                                            umerical value
  123 000000BE FB03 F10A       MUL              R1, R3, R10
  124 000000C2 EBA0 0001       SUB              R0, R0, R1  ;R0 = R0%10
  125 000000C6 F104 0401       ADD              R4, #1
  126 000000CA FBBA FAF9       UDIV             R10, R10, R9 ;divisor/10 (ex: 1
                                                            000/10 = 100)



ARM Macro Assembler    Page 4 


  127 000000CE F8CB 4000       STR              R4, [R11, #cnt]
  128 000000D2 2C01            CMP              R4, #1
  129 000000D4 D107            BNE              skip        ;if cnt is one, we 
                                                            need a decimal poin
                                                            t
  130 000000D6 F04F 012E       MOV              R1, #0x2E   ;0x2E = *
  131 000000DA F848 1004       STR              R1, [R8, R4]
  132 000000DE F104 0401       ADD              R4, #1
  133 000000E2 F8CB 4000       STR              R4, [R11, #cnt]
  134 000000E6 2C05    skip    CMP              R4, #5
  135 000000E8 D1DF            BNE              OFloop      ;if we have 5 chara
                                                            cters, move on
  136 000000EA         OFout
  137 000000EA F04F 0100       MOV              R1, #0x00
  138 000000EE F848 1004       STR              R1, [R8, R4] ;null terminate st
                                                            ring
  139 000000F2 4803            LDR              R0, =FixedPt
  140 000000F4 F7FF FFFE       BL               ST7735_OutString ;output string
                                                             to the display
  141 000000F8         
  142 000000F8 B001            ADD              SP, #4      ;deallocate
  143 000000FA E8BD 4F10       POP{R4,R8,R9,R10,R11,LR}     ;restore
  144 000000FE         
  145 000000FE 4770    nope    BX               LR
  146 00000100         
  147 00000100                 ALIGN
  148 00000100         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  149 00000100         
  150 00000100                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  151 00000100                 END                          ; end of file
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 18 in file Print.s
   Uses
      None
Comment: DATA unused
FixedPt 00000000

Symbol: FixedPt
   Definitions
      At line 19 in file Print.s
   Uses
      At line 89 in file Print.s
      At line 103 in file Print.s
      At line 116 in file Print.s
      At line 139 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 21 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 34 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 00000052

Symbol: LCD_OutFix
   Definitions
      At line 82 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
ODloop 00000012

Symbol: ODloop
   Definitions
      At line 42 in file Print.s
   Uses
      At line 52 in file Print.s
Comment: ODloop used once
ODout 00000032

Symbol: ODout
   Definitions
      At line 53 in file Print.s
   Uses
      At line 61 in file Print.s
Comment: ODout used once
OFloop 000000AA

Symbol: OFloop
   Definitions
      At line 117 in file Print.s
   Uses
      At line 135 in file Print.s
Comment: OFloop used once
OFout 000000EA

Symbol: OFout
   Definitions
      At line 136 in file Print.s
   Uses
      None
Comment: OFout unused
filler 0000005E

Symbol: filler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 88 in file Print.s
   Uses
      At line 100 in file Print.s
Comment: filler used once
nope 000000FE

Symbol: nope
   Definitions
      At line 145 in file Print.s
   Uses
      At line 107 in file Print.s
Comment: nope used once
skip 000000E6

Symbol: skip
   Definitions
      At line 134 in file Print.s
   Uses
      At line 129 in file Print.s
Comment: skip used once
skipper 00000078

Symbol: skipper
   Definitions
      At line 98 in file Print.s
   Uses
      At line 94 in file Print.s
Comment: skipper used once
st 00000090

Symbol: st
   Definitions
      At line 109 in file Print.s
   Uses
      At line 86 in file Print.s
Comment: st used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

cnt 00000000

Symbol: cnt
   Definitions
      At line 32 in file Print.s
   Uses
      At line 39 in file Print.s
      At line 43 in file Print.s
      At line 49 in file Print.s
      At line 57 in file Print.s
      At line 59 in file Print.s
      At line 112 in file Print.s
      At line 118 in file Print.s
      At line 127 in file Print.s
      At line 133 in file Print.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 56 in file Print.s
Comment: ST7735_OutChar used once
ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      At line 105 in file Print.s
      At line 140 in file Print.s

2 symbols
350 symbols in table
